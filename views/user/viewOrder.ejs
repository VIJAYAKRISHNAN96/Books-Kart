<%- include('../partials/header.ejs') %>

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <link rel="stylesheet" href="/userAssets/css/main.css"> 

<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #e9ecef;
        margin: 0;
        padding: 0;
    }
    h1 {
        text-align: center;
        margin-top: 20px;
        color: #343a40;
    }
    table {
        width: 95%;
        margin: 20px auto;
        border-collapse: collapse;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
    }
    th, td {
        padding: 15px;
        text-align: left;
        border-bottom: 1px solid #dee2e6;
    }
    th {
        background-color: #f8f9fa;
        color: #495057;
        font-weight: bold;
    }
    td img {
        border-radius: 5px;
    }
    td:last-child {
        text-align: center;
    }
    a {
        color: #007bff;
        text-decoration: none;
        transition: color 0.3s;
    }
    a:hover {
        color: #0056b3;
    }
    button {
        cursor: pointer;
        border: none;
        border-radius: 5px;
        color: #ffffff;
        padding: 10px 20px;
        font-size: 14px;
        transition: background-color 0.3s;
        outline: none;
    }
    .btn-cancel {
        background-color: #dc3545;
        border-color: #dc3545;
    }
    .btn-cancelled {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
        cursor: not-allowed;
    }
    .btn-return {
        background-color: #ffc107;
        border-color: #ffc107;
    }
    #summary-table {
        width: 95%;
        margin: 20px auto;
        border-collapse: collapse;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
    }
    #summary-table th, #summary-table td {
        padding: 15px;
        text-align: left;
        border-bottom: 1px solid #dee2e6;
    }
    #summary-table th {
        background-color: #f8f9fa;
        color: #495057;
        font-weight: bold;
    }
    .action-buttons {
        text-align: center;
        margin: 20px auto;
    }
    .action-buttons button {
        margin: 0 10px;
    }
</style>
<body>
    <h1>Order Details</h1>

    <table>
        <thead>
            <tr>
                <th>Order Date</th>
                <th>Product Details</th>
                <th>Order Status</th>
                <th>Payment Status</th>
                <th>Payment Method</th>
                <th>Product Price</th>
                <th>Quantity</th>
                <th>Total Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <% order.items.forEach(item => { %>
                <tr>
                    <td><%= order.orderDate.toDateString() %></td>
                    <!-- <td><img src="/uploads/<%= item.image[0] %>" alt="Product Image" style="width: 100px; height: 120px;"></td> -->
                    <td><%= item.name || 'Product' %></td>
                    <td data-input-id="<%= item._id %>"><%= item.status %></td>
                    <td><%= order.paymentStatus %></td>
                    <td><%= order.paymentMethod %></td>
                    <!-- <td>$<%= item.productPrice.toFixed(2) %></td>
                    <td><%= item.quantity %></td>
                    <td>$<%= (item.productPrice * item.quantity).toFixed(2) %></td> -->
                    <td>$<%= (item.productPrice ? item.productPrice.toFixed(2) : '0.00') %></td>
                     <td><%= item.quantity || 0 %></td>
                    <td>$<%= (item.productPrice && item.quantity ? (item.productPrice * item.quantity).toFixed(2) : '0.00') %></td>


                    <td>
                        <% if(item.status==="Delivered") {%>
                            <button onclick="showReturnConfirmation('<%= order._id %>', '<%= item._id %>')" data-input-id="<%= item._id %>" style="background-color: #FF6B6B; border-color:  #FF6B6B; color: white;">Return</button>
                        <%}%>
                        <% if (item.status!="Cancelled") { %>
                            <% if (item.status === 'Pending' || item.status === 'Confirmed') { %>
                                <button onclick="showCancelConfirmation('<%= order._id %>', '<%= item._id %>')" data-input-id="<%= item._id %>" style="background-color: #FF6B6B; border-color:  #FF6B6B; color: white; " >Cancel</button>
                            <% } else { %>
                                
                            <% } %>
                        <%} else { %>
                            <button onclick="showCancelConfirmation('<%= order._id %>', '<%= item._id %>')" data-input-id="<%= item._id %>" style="background-color: #FF6B6B; border-color:  #FF6B6B; color: white;" disabled >Order Cancelled</button>
                        <% } %>
                    </td>
                    <!-- <div style="text-align: right; margin-top: 20px;"> -->
                        <div style="text-align:right; margin-top: 20px; margin-right: 15%; width: 95%;">

                        <% if(order.paymentStatus=== "Failed") { %>
                            <button onclick="retryPayment('<%= order._id %>','<%=order.billTotal%>')" data-input-id="<%= order._id %>" style="padding: 10px 20px; background-color: #557775; color: white; border: none; border-radius: 5px; cursor: pointer;">Retry Payment</button>
                        <%}else if(order.orderStatus=="Delivered") { %>
                            <button onclick="downloadInvoice('<%= order._id %>')" style="padding: 10px 20px; background-color: #557775; color: white; border: none; border-radius: 5px; cursor: pointer;">Download Invoice</button>
                        <%}else { %>
                            -
                        <%}%>
                    </div>
                </tr>
            <% }); %>

        </tbody>


         
    </table>

    

    <table id="summary-table">
        <tbody>
            <tr>
                <th>Grand Total</th>
                <!-- <td id="grandTotal">$<%= order.billTotal.toFixed(2) %></td> -->
                <td id="grandTotal">$<%= order.billTotal ? order.billTotal.toFixed(2) : '0.00' %></td>

            </tr>
            <tr>
                <th>Shipping Address</th>
                <td id="shippingAddress">
                    <%= order.shippingAddress.houseName %>,<br>
                    <%= order.shippingAddress.street %>,<br>
                    <%= order.shippingAddress.city %>,<br>
                    <%= order.shippingAddress.state %>,<br>
                    <%= order.shippingAddress.country %> - <%= order.shippingAddress.postalCode %>
                </td>
            </tr>
        </tbody>
    </table>

   










    <!-- <div class="action-buttons">
        < Removed retry payment and download invoice buttons as per request -->
    <!-- </div>  -->
</body>

<%- include("../partials/footer.ejs") %>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>



<script>
    

    function showCancelConfirmation(orderId, itemId) {
    Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            cancelOrder(orderId, itemId);
        }
    });
}

    // async function cancelOrder(orderId, itemId) {
    //     try {
    //         const response = await fetch('/cancelOrder', {
    //             method: 'POST',
    //             headers: {
    //                 'Content-Type': 'application/json'
    //             },
    //             body: JSON.stringify({ orderId, itemId})
    //         });
    //         const data = await response.json();
    //         if (response.ok) {
    //             Swal.fire('Order Cancelled', data.message, 'success');
    //             document.querySelector(`[data-input-id="${itemId}"]`).textContent = 'Cancelled';
    //             const cancelButton = document.querySelector(`button[data-input-id="${itemId}"]`);
    //             cancelButton.innerHTML = 'Order Cancelled';
    //             cancelButton.disabled = true;
    //             location.reload();
    //         } else {
    //             Swal.fire('Error', data.message, 'error');  
    //         }
    //     } catch (error) {
    //         console.error('Error:', error);
    //         Swal.fire('Error', 'An error occurred while cancelling the order', 'error');
    //     }
    // }


    async function cancelOrder(orderId, itemId, cancellationReason) {
    try {
        const response = await fetch('/cancelOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ orderId, itemId, cancellationReason })
        });
        const data = await response.json();
        if (response.ok) {
            Swal.fire('Order Cancelled', data.message, 'success');
            document.querySelector(`[data-input-id="${itemId}"]`).textContent = 'Cancelled';
            const cancelButton = document.querySelector(`button[data-input-id="${itemId}"]`);
            cancelButton.innerHTML = 'Order Cancelled';
            cancelButton.disabled = true;
            location.reload();
        } else {
            Swal.fire('Error', data.message, 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while cancelling the order', 'error');
    }
}










    function showReturnConfirmation(orderId, itemId) {
        Swal.fire({
            title: 'Return Order',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, return it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                const returnReason = document.getElementById('returnReason').value;
                // Call a function to handle order cancellation
                returnOrder(orderId, itemId, returnReason);
            }
        });
    }

    async function returnOrder(orderId, itemId,) {
        try {
            const response = await fetch('/returnOrder', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ orderId, itemId,})
            });
            const data = await response.json();
            if (response.ok) {
                // Handle success
                Swal.fire('Order Returned', data.message, 'success');
                location.reload()
              
            } else {
                // Handle error
                Swal.fire('Error', data.message, 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire('Error', 'An error occurred while cancelling the order', 'error');
        }
       
    }

  

    function retryOrderPlace(orderId, totalAmount, status) {
    fetch(`/retryPayment`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            orderId,
            totalAmount,
            status
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if (data.message === "Order placed successfully") {
                Swal.fire({
                    icon: "success",
                    title: 'Order Confirmed',
                    text: "Your payment was successful and the order has been placed.",
                    confirmButtonText: "OK"
                }).then((result) => {
                    if (result.isConfirmed) {
                        location.reload();
                    }
                });
            } else if (data.message === "Payment failed retry") {
                Swal.fire({
                    icon: "error",
                    title: 'Payment Failed',
                    text: data.message,
                    confirmButtonText: "Ok"
                });
            }
        } else {
            Swal.fire({
                icon: 'warning',
                title: 'Order Placement Failed',
                text: data.message
            });
        }
    })
    .catch(error => {
        console.error('Error confirming order:', error);
        Swal.fire({
            icon: 'error',
            title: 'Order Placement Failed',
            text: 'There was an error confirming your order. Please try again.'
        });
    });
}


function retryPayment(orderId, totalAmount) {
    console.log("billtotal", totalAmount);
    fetch("/retryOrder", {
        method: "PUT",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            orderId: orderId,
            totalAmount: totalAmount
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log("success");
            // Proceed with Razorpay payment
            const options = {
                key: data.key_id,
                amount: data.amount,
                currency: "INR",
                name: "Books Kart",
                description: data.description,
                image: "",
                order_id: data.order_id,
                handler: function (response) {
                    console.log(response);
                    retryOrderPlace(orderId, totalAmount, "Success");
                },
                prefill: {
                    contact: data.contact,
                    name: data.name,
                    email: data.email
                },
                notes: {
                    description: data.description
                },
                theme: {
                    color: "#00cc66"
                },
            };

            const razorpayObject = new Razorpay(options);
            razorpayObject.open();

            razorpayObject.on('payment.failed', function (response) {
                console.error(response.error);
                retryOrderPlace(orderId, totalAmount, "Failed");
            });
        } else {
            // Handle errors if the order couldn't be placed
            Swal.fire({
                icon: 'warning',
                title: 'Order Placement Failed',
                text: data.msg
            });
        }
    })
    .catch(error => {
        console.error('Error placing order:', error);
        Swal.fire({
            icon: 'error',
            title: 'Order Placement Failed',
            text: 'There was an error placing your order. Please try again.'
        });
    });
}

async function downloadInvoice(orderId) {
    try {
        const response = await fetch(`/downloadInvoice?orderId=${orderId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `invoice_${orderId}.pdf`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        } else {
            const data = await response.json();
            Swal.fire('Error', data.message, 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while downloading the invoice', 'error');
    }
}














   
// </script>

