<%-include("../partials/header.ejs")%>



<style>
    .pagination {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.pagination .btn {
    border-radius: 5px;
    padding: 8px 16px;
    font-size: 14px;
    transition: background-color 0.3s, color 0.3s;
}

.pagination .btn-outline-primary {
    border: 1px solid #007bff;
    color: #007bff;
    background-color: #fff;
}

.pagination .btn-outline-primary:hover {
    background-color: #007bff;
    color: #fff;
}

.pagination .btn-primary {
    background-color: #007bff;
    color: #fff;
    border: 1px solid #007bff;
}

.pagination .btn-primary:hover {
    background-color: #0056b3;
    border-color: #0056b3;
}

.pagination .btn-light {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    color: #6c757d;
}

.pagination .btn-light:hover {
    background-color: #e2e6ea;
    color: #495057;
}

.pagination .btn[disabled] {
    pointer-events: none;
    opacity: 0.65;
}

</style>

<style>
    /* Wallet Section Styling */
.wallet-container {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.wallet-title {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
    text-align: center;
}

.wallet-balance {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
    font-size: 18px;
}

.balance-label {
    font-weight: 600;
    margin-right: 10px;
    color: #6c757d;
}

.balance-amount {
    font-size: 22px;
    font-weight: bold;
}

.high-balance {
    color: #28a745;
}

.low-balance {
    color: #dc3545;
}

.no-balance {
    color: #6c757d;
}

.transaction-history {
    margin-top: 30px;
}

.transaction-title {
    font-size: 20px;
    margin-bottom: 15px;
    text-align: center;
}

.transaction-table {
    width: 100%;
    border-radius: 8px;
    overflow: hidden;
}

.transaction-table thead {
    background-color: #343a40;
    color: #fff;
}

.transaction-table th, .transaction-table td {
    padding: 12px;
    text-align: center;
}

.transaction-table th {
    font-weight: 600;
}

.transaction-table td {
    font-size: 16px;
}

.transaction-table tbody tr:nth-child(odd) {
    background-color: #f8f9fa;
}

.transaction-table tbody tr:nth-child(even) {
    background-color: #e9ecef;
}

.transaction-table tbody tr:hover {
    background-color: #dee2e6;
    cursor: pointer;
}

.text-center {
    text-align: center;
    color: #6c757d;
}

</style>

<style>
    /* Orders Section Styling */
.order-card {
    border: none;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    background-color: #ffffff;
}

.order-header {
    background-color: #007bff;
    color: #ffffff;
    padding: 15px 20px;
    border-radius: 8px 8px 0 0;
    text-align: center;
}

.order-body {
    padding: 20px;
}

.table-responsive {
    margin-top: 20px;
}

.order-table thead {
    background-color: #343a40;
    color: #ffffff;
    text-align: center;
}

.order-table th,
.order-table td {
    padding: 12px 15px;
    text-align: center;
}

.order-products img {
    max-width: 50px;
    display: inline-block;
    margin-right: 10px;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.order-status .badge {
    font-size: 14px;
    padding: 5px 10px;
    border-radius: 12px;
}

.order-status .badge-danger {
    background-color: #dc3545;
}

.order-status .badge-success {
    background-color: #28a745;
}

.pagination {
    display: flex;
    justify-content: center;
    margin-top: 20px;
}

.pagination .btn {
    margin: 0 5px;
    min-width: 40px;
    text-align: center;
}

.pagination .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
    color: #ffffff;
}

.pagination .btn-light {
    background-color: #f8f9fa;
    border-color: #f8f9fa;
}

.pagination .btn-secondary {
    background-color: #6c757d;
    border-color: #6c757d;
}

</style>


<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAddressModalLabel">Add Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addAddressForm">
                    <div class="mb-3">
                        <label for="houseName" class="form-label">House Name:</label>
                        <input type="text" class="form-control" id="houseName" required>
                        <div id="houseNameError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="street" class="form-label">Street:</label>
                        <input type="text" class="form-control" id="street" required>
                        <div id="streetError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="city" class="form-label">City:</label>
                        <input type="text" class="form-control" id="city" required>
                        <div id="cityError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="state" class="form-label">State:</label>
                        <input type="text" class="form-control" id="state" required>
                        <div id="stateError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="country" class="form-label">Country:</label>
                        <input type="text" class="form-control" id="country" required>
                        <div id="countryError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="postalCode" class="form-label">Postal Code:</label>
                        <input type="text" class="form-control" id="postalCode" required>
                        <div id="postalCodeError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="phoneNo" class="form-label">Phone No:</label>
                        <input type="text" class="form-control" id="phoneNo" required>
                        <div id="phoneNoError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="addressType" class="form-label">Address Type:</label><br>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="addressType" id="office" value="office">
                            <label class="form-check-label" for="office">Office</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="addressType" id="home" value="home">
                            <label class="form-check-label" for="home">Home</label>
                        </div>
                        <div id="addressTypeError" class="error-message text-danger"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="background-color: #FF6B6B;">Close</button>
                <button type="button" class="btn btn-primary" onclick="validateAddress()" style="background-color: #557775;">Save Address</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="addressId">
                <form id="editAddressForm">
                    <div class="mb-3">
                        <label for="editHouseName" class="form-label">House Name:</label>
                        <input type="text" class="form-control" id="editHouseName" >
                    </div>
                    <div class="mb-3">
                        <label for="editStreet" class="form-label">Street:</label>
                        <input type="text" class="form-control" id="editStreet">
                    </div>
                    <div class="mb-3">
                        <label for="editCity" class="form-label">City:</label>
                        <input type="text" class="form-control" id="editCity">
                    </div>
                    <div class="mb-3">
                        <label for="editState" class="form-label">State:</label>
                        <input type="text" class="form-control" id="editState">
                    </div>
                    <div class="mb-3">
                        <label for="editCountry" class="form-label">Country:</label>
                        <input type="text" class="form-control" id="editCountry">
                    </div>
                    <div class="mb-3">
                        <label for="editPostalCode" class="form-label">Postal Code:</label>
                        <input type="text" class="form-control" id="editPostalCode">
                    </div>
                    <div class="mb-3">
                        <label for="editPhoneNo" class="form-label">Phone No:</label>
                        <input type="text" class="form-control" id="editPhoneNo">
                    </div>
                    <div class="mb-3">
                        <label for="editAddressType" class="form-label">Address Type:</label><br>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="editAddressType" id="editOffice" value="office">
                            <label class="form-check-label" for="editOffice">Office</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="editAddressType" id="editHome" value="home">
                            <label class="form-check-label" for="editHome">Home</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="updateAddress()">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resetPasswordModalLabel">Reset Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="resetPasswordForm">
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Current Password</label>
                        <input type="password" class="form-control" id="currentPassword" required>
                        <div class="error-message text-danger" id="currentPasswordError"></div>
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" required>
                        <div class="error-message text-danger" id="newPasswordError"></div>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="confirmPassword" required>
                        <div class="error-message text-danger" id="confirmPasswordError"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="background-color: #FF6B6B;">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="validateForm()" style="background-color: #557775;">Confirm</button>
            </div>
        </div>
    </div>
</div>

<main class="main">
    <div class="page-header breadcrumb-wrap">
        <div class="container">
            <div class="breadcrumb">
                <a href="/" rel="nofollow">Home</a>
                    
                <span></span> Account
            </div>
        </div>
    </div>
    <section class="pt-150 pb-150">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 m-auto">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="dashboard-menu">
                                <ul class="nav flex-column" role="tablist">
                                    <!-- <li class="nav-item">
                                        <a class="nav-link show" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="false">
                                            <i class="fi-rs-settings-sliders mr-10"></i>Dashboard
                                        </a>
                                    </li> -->
                                    <li class="nav-item">
                                        <a class="nav-link active " id="account-detail-tab" data-bs-toggle="tab" href="#account-detail" role="tab" aria-controls="account-detail" aria-selected="true">
                                            <i class="fi-rs-user mr-10"></i>Account details
                                        </a>
                                    </li>
                                    <li class="nav-item ">
                                        <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="true">
                                            <i class="fi-rs-shopping-bag mr-10"></i>Orders
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="true">
                                            <i class="fi-rs-marker mr-10"></i>My Address
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="wallet-tab" data-bs-toggle="tab" href="#wallet" role="tab" aria-controls="wallet" aria-selected="true">
                                            <i class="fi-rs-shopping-bag mr-10"></i>Wallet
                                        </a>
                                    </li>
                                   
                                    <li class="nav-item">
                                        <a class="nav-link" href="/logout">
                                            <i class="fi-rs-sign-out mr-10"></i>Logout
                                        </a>
                                    </li>
                                </ul>
                                
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="tab-content dashboard-content">

                                <div class="tab-pane fade active show" id="account-detail" role="tabpanel" aria-labelledby="account-detail-tab">
                                    <div class="card">
                                        <div class="card-header">
                                            <h5>Account Details</h5>
                                        </div>
                                        <div class="card-body">
                                            <form id="editingForm">
                                                <div class="row">
                                                    <div class="form-group col-md-6">
                                                        <label>Name <span class="required"></span></label>
                                                        <input required="" class="form-control square" name="name" id="name" type="text" value="<%= user.name %>">
                                                    </div>
                                                    <div class="form-group col-md-6">
                                                        <label>Email Address <span class="required">*</span></label>
                                                        <input required="" class="form-control square" name="email" id="email" type="email" value="<%= user.email %>">
                                                    </div>
                                                </div>
                                
                                                <div class="row mt-3 text-center">
                                                    <div class="col-md-12">
                                                        <button type="button" class="btn btn-fill-out submit" name="submit" value="Submit" style="background-color: #557775;" onclick="saveUser()">Save</button>
                                                    </div>
                                                </div>
                                            </form>
                                
                                            <!-- Reset Password Button -->
                                            <div class="text-center mt-4">
                                                <button type="button" class="btn btn-fill-out reset" style="background-color: #f74040; border-color:#FF6B6B;" onclick="resetPassword()">Reset Password</button>
                                            </div>
                                        </div>      
                                    </div>
                                </div>
                                
                                
                                

                                
                                <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                                    <div class="card order-card">
                                        <div class="card-header order-header">
                                            <h5 class="mb-0">Your Orders</h5>
                                        </div>
                                        <div class="card-body order-body">
                                            <div class="table-responsive">
                                                <table class="table order-table">
                                                    <thead class="thead-dark">
                                                        <tr>
                                                            <th>Order No.</th>
                                                            <th>Order Date</th>
                                                            <th>Order Status</th>
                                                            <th>Total</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% if (order && order.length > 0) { %>
                                                            <% order.forEach((orderItem, index) => { %>
                                                                <% let allItemsCancelled = orderItem.items.every(item => item.status === 'Cancelled'); %>
                                                                <tr>
                                                                    <td><%= index + 1 %></td>
                                                                    <td><%= new Date(orderItem.orderDate).toDateString() %></td>
                                                                    <td class="order-status">
                                                                        <% if (allItemsCancelled) { %>
                                                                            <span class="badge badge-danger">Cancelled</span>
                                                                        <% } else { %>
                                                                            <span class="badge badge-success"><%= orderItem.orderStatus %></span>
                                                                        <% } %>
                                                                    </td>
                                                                    <td>
                                                                        $<%= orderItem.billTotal ? orderItem.billTotal.toFixed(2) : 'N/A' %> for <%= orderItem.items.length %> item(s)
                                                                    </td>
                                                                    <td>
                                                                        <a href="/viewOrder?id=<%= orderItem._id %>" class="btn btn-outline-primary btn-sm">View</a>
                                                                    </td>
                                                                </tr>
                                                            <% }); %>
                                                        <% } else { %>
                                                            <tr>
                                                                <td colspan="5" class="text-center">No orders found</td>
                                                            </tr>
                                                        <% } %>
                                                    </tbody>
                                                </table>
                                            </div>
                                            
                                            <div class="pagination mt-4">
                                                <% if (currentPage > 1) { %>
                                                    <a href="?page=<%= currentPage - 1 %>" class="btn btn-secondary">Previous</a>
                                                <% } %>
                                
                                                <% if (currentPage > 3) { %>
                                                    <a href="?page=1" class="btn btn-light">1</a>
                                                    <% if (currentPage > 4) { %>
                                                        <span class="btn btn-light">...</span>
                                                    <% } %>
                                                <% } %>
                                
                                                <% for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                                                    <a href="?page=<%= i %>" class="btn <%= currentPage === i ? 'btn-primary' : 'btn-light' %>"><%= i %></a>
                                                <% } %>
                                
                                                <% if (currentPage < totalPages - 2) { %>
                                                    <% if (currentPage < totalPages - 3) { %>
                                                        <span class="btn btn-light">...</span>
                                                    <% } %>
                                                    <a href="?page=<%= totalPages %>" class="btn btn-light"><%= totalPages %></a>
                                                <% } %>
                                
                                                <% if (currentPage < totalPages) { %>
                                                    <a href="?page=<%= currentPage + 1 %>" class="btn btn-secondary">Next</a>
                                                <% } %>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                

                                <div class="tab-pane fade " id="address" role="tabpanel" aria-labelledby="address-tab">
                                    <!-- Add Address button -->
                                    <div class="text-end mb-3">
                                        <button type="button" class="btn " data-bs-toggle="modal" style="background-color: #FF6B6B; border-color: #FF6B6B;" data-bs-target="#addAddressModal">Add Address <i class="" style="color: #ffffff;"></i></button>
                                    </div>
                                    
                                    <div class="row">
                                        <% user.address.forEach(function(add) { %>
                                        <div class="col-lg-6 mt-15   ">
                                            <div class="card mb-3 mb-lg-0">
                                                <div class="card-header">
                                                    <h5 class="mb-0"><%=add.type %> Address</h5>
                                                </div>
                                                <div class="card-body">
                                                    <address><%=add.houseName%><br> <%=add.street %>,<br> <%=add.city%>,<%=add.postalCode%> <br><%=add.phoneNumber%><br><%=add.state%></address>
                                                    <p><%=add.country %></p>
                                                    

                                                    <a type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#editAddressModal"

                                                    onclick="populateEditForm('<%= add._id %>', '<%= add.houseName %>', '<%= add.street %>', '<%= add.city %>', '<%= add.state %>', '<%= add.country %>', '<%= add.postalCode %>', '<%= add.phoneNumber %>', '<%= add.type %>')">
                                                        Edit
                                                    </a>

                                                    <a type="button" class="btn btn-sm btn-outline-danger ml-2" onclick="confirmDelete('<%= add._id %>')">
                                                        Delete
                                                    </a>


                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                    </div>
                                </div>




                                <div class="tab-pane fade" id="wallet" role="tabpanel" aria-labelledby="wallet-tab">
                                    <div class="wallet-container">
                                        <h2 class="wallet-title">Your Wallet</h2>
                                        <div class="wallet-balance">
                                            <span class="balance-label">Wallet Balance:</span>
                                            <% if (wallet) { %>
                                                <% if (wallet.balance > 1000) { %>
                                                    <span class="balance-amount high-balance">$<%= wallet.balance.toFixed(2) %></span>
                                                <% } else { %>
                                                    <span class="balance-amount low-balance">$<%= wallet.balance.toFixed(2) %></span>
                                                <% } %>
                                            <% } else { %>
                                                <span class="balance-amount no-balance">Wallet not available</span>
                                            <% } %>
                                        </div>
                                        <div class="transaction-history mt-4">
                                            <h3 class="transaction-title">Transaction History</h3>
                                            <table class="transaction-table table table-striped table-hover">
                                                <thead class="thead-dark">
                                                    <tr>
                                                        <th>Order</th>
                                                        <th>Description</th>
                                                        <th>Type</th>
                                                        <th>Date</th>
                                                        <th>Amount</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="transactionTableBody">
                                                    <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
                                                        <% wallet.transactions.forEach((transaction, index) => { %>
                                                            <tr>
                                                                <td><%= index + 1 %></td>
                                                                <td><%= transaction.description %></td>
                                                                <td><%= transaction.type %></td>
                                                                <td><%= new Date(transaction.date).toLocaleDateString() %></td>
                                                                <td>$<%= transaction.amount.toFixed(2) %></td>
                                                            </tr>
                                                        <% }); %>
                                                    <% } else { %>
                                                        <tr>
                                                            <td colspan="5" class="text-center">No transactions found.</td>
                                                        </tr>
                                                    <% } %>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                              </div>   
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>


<script>
    // Example condition
    var shouldHideAccountDetailsTab = false; // Set this based on your logic

    if (shouldHideAccountDetailsTab) {
        document.getElementById('accountDetailsTab').style.display = 'none';
    }
</script>


<script>

    function saveUser() {
        console.log('changing user details')
        var name = document.getElementById('name').value;
        var email = document.getElementById('email').value;
    
        fetch(`/editdetails`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: name,
                email: email
            })
        })
        .then(response => {
            console.log('first .then')
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json(); // Parse response body as JSON
        })
        .then(data => {
            if (data.success) {
                console.log("SWEET ALERTT")
                // Show SweetAlert for success
                Swal.fire({
                    icon: 'success',
                    title: 'Updated successfully',
                    showConfirmButton: true,
                    timer: 1500
                }).then(() => {
                    // Reload the page after alert
                    window.location.reload();
                });
            } else {
                throw new Error('Update failed');
            }
        })
        .catch(error => {
            // Handle error
            console.error('There was a problem with the fetch operation:', error);
            // Optionally, show an alert for failure
            Swal.fire({
                icon: 'error',
                title: 'Update failed',
                text: error.message,
            });
        });
    }
    
        
    
        function resetPassword() {
        let resetPasswordModal = new bootstrap.Modal(document.getElementById('resetPasswordModal'));
        resetPasswordModal.show();
        }
    
        function validateForm() {
        // Reset previous error messages
        document.querySelectorAll('.error-message').forEach(elem => elem.textContent = '');
    
        // Get input values
        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
    
        let isValid = true;
    
        // Validation for empty fields
        if (currentPassword.trim() === '') {
            document.getElementById('currentPasswordError').textContent = 'Current password is required';
            isValid = false;
        }
    
        if (newPassword.trim() === '') {
            document.getElementById('newPasswordError').textContent = 'New password is required';
            isValid = false;
        } else if (!isStrongPassword(newPassword)) {
            document.getElementById('newPasswordError').textContent = 'Password must contain at least one uppercase letter, one lowercase letter, and one number';
            isValid = false;
        }
    
        if (confirmPassword.trim() === '') {
            document.getElementById('confirmPasswordError').textContent = 'Confirm password is required';
            isValid = false;
        } else if (newPassword !== confirmPassword) {
            document.getElementById('confirmPasswordError').textContent = 'Passwords do not match';
            isValid = false;
        }
    
        if (isValid) {
            // Call the function to confirm reset password
            confirmResetPassword();
        }
    }
    
    function isStrongPassword(password) {
        // Password must contain at least one uppercase letter, one lowercase letter, and one number
        const uppercaseRegex = /[A-Z]/;
        const lowercaseRegex = /[a-z]/;
        const numberRegex = /[0-9]/;
    
        return uppercaseRegex.test(password) && lowercaseRegex.test(password) && numberRegex.test(password);
    }
    
    function confirmResetPassword() {
        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
    
        // Data to be sent in the request body
        const data = {
            currentPassword: currentPassword,
            newPassword: newPassword
        };
    
        fetch('/resetpassword', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json(); // Parse response body as JSON
        })
        .then(data => {
            // Handle success response from the backend
             // Log the response data
    
            // Show SweetAlert for success
            if(data.success){
                Swal.fire({
                icon: 'success',
                title: 'Password reset successful',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                    // Hide the modal after the SweetAlert
                    $('#resetPasswordModal').modal('hide');
                    document.getElementById('resetPasswordForm').reset()
    
                });
            }else {
                // Handle other response errors here
                // For example, if there's an error message in the response
                Swal.fire({
                    icon: 'error',
                    title: 'Password reset failed',
                    text: data.message || 'Unknown error occurred'
                }).then(() => {
                    // Hide the modal after the SweetAlert
                    $('#resetPasswordModal').modal('hide');
                    document.getElementById('resetPasswordForm').reset()
                    
                });
            }
            
        })
        .catch(error => {
    
           
            // Handle error
            console.error('There was a problem with the fetch operation:', error);
            
            // Show SweetAlert for failure
            Swal.fire({
                icon: 'error',
                title: 'Password reset failed',
                text: error.message
            }).then(() => {
                    // Hide the modal after the SweetAlert
                    $('#resetPasswordModal').modal('hide');
                });
        });
    }
    
    //--address validaiton-----//
    function validateAddress() {
            // Reset previous error messages
            document.querySelectorAll('.error-message').forEach(elem => elem.textContent = '');
    
            // Get input values
            const houseName = document.getElementById('houseName').value.trim();
            const street = document.getElementById('street').value.trim();
            const city = document.getElementById('city').value.trim();
            const state = document.getElementById('state').value.trim();
            const country = document.getElementById('country').value.trim();
            const postalCode = document.getElementById('postalCode').value.trim();
            const phoneNo = document.getElementById('phoneNo').value.trim();
            const addressType = document.querySelector('input[name="addressType"]:checked');
    
            let isValid = true;
    
            // Validation for empty fields
            if (houseName === '') {
                document.getElementById('houseNameError').textContent = 'House Name is required';
                isValid = false;
            }
    
            if (street === '') {
                document.getElementById('streetError').textContent = 'Street is required';
                isValid = false;
            }
    
            if (city === '') {
                document.getElementById('cityError').textContent = 'City is required';
                isValid = false;
            }
            if (state === '') {
                document.getElementById('stateError').textContent = 'State is required';
                isValid = false;
            }
    
            if (country === '') {
                document.getElementById('countryError').textContent = 'Country is required';
                isValid = false;
            }
    
            // Validation for postal code (should be exactly 6 digits)
            if (!/^\d{6}$/.test(postalCode)) {
                document.getElementById('postalCodeError').textContent = 'Postal Code should contain 6 digits';
                isValid = false;
            }
    
            // Validation for phone number (should be exactly 10 digits)
            if (!/^\d{10}$/.test(phoneNo)) {
                document.getElementById('phoneNoError').textContent = 'Phone No should contain 10 digits';
                isValid = false;
            }
    
            // Validation for address type
            if (!addressType) {
                document.getElementById('addressTypeError').textContent = 'Please select Address Type';
                isValid = false;
            }
            if (isValid) {
            // Data to be sent in the request body
            const data = {
                houseName: houseName,
                street: street,
                city: city,
                state:state,
                country: country,
                postalCode: postalCode,
                phoneNo: phoneNo,
                addressType: addressType.value
            };
    
            // Perform fetch operation
            fetch('/addAddress', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Parse response body as JSON
            })
            .then(data => {
                if(data.success){
                Swal.fire({
                icon: 'success',
                title: 'Address Added Succesfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                    // Hide the modal after the SweetAlert
                    $('#addAddressModal').modal('hide');
                    document.getElementById('addAddressForm').reset()
                    location.reload()
    
                });
               
            }else {
                // Handle other response errors here
                // For example, if there's an error message in the response
                Swal.fire({
                    icon: 'error',
                    title: 'Adding Address failed',
                    text: data.message || 'Unknown error occurred'
                }).then(() => {
                    // Hide the modal after the SweetAlert
                    $('#addAddressModal').modal('hide');
                    document.getElementById('addAddressForm').reset()
                    location.reload()
                });
               
            }
            })
            .catch(error => {
                // Handle error
                console.error('There was a problem with the fetch operation:', error);
                // Optionally, show an alert for failure
                alert('Address addition failed: ' + error.message);
            });
            
        }
        }
    
        //populateEdit Modal
        function populateEditForm(addressId, houseName, street, city, state, country, postalCode, phoneNumber, type) {
        console.log(addressId)
        document.getElementById('addressId').value = addressId;    
        document.getElementById('editHouseName').value = houseName;
        document.getElementById('editStreet').value = street;
        document.getElementById('editCity').value = city;
        document.getElementById('editState').value = state;
        document.getElementById('editCountry').value = country;
        document.getElementById('editPostalCode').value = postalCode;
        document.getElementById('editPhoneNo').value = phoneNumber;
        
        if (type === 'office') {
            document.getElementById('editOffice').checked = true;
        } else if (type === 'home') {
            document.getElementById('editHome').checked = true;
        }
    }
    
    //fetch operation for address update
    function updateAddress() {
        // Gather data from the form fields
        const addressId=document.getElementById('addressId').value;
        const houseName = document.getElementById('editHouseName').value;
        const street = document.getElementById('editStreet').value;
        const city = document.getElementById('editCity').value;
        const state = document.getElementById('editState').value;
        const country = document.getElementById('editCountry').value;
        const postalCode = document.getElementById('editPostalCode').value;
        const phoneNumber = document.getElementById('editPhoneNo').value;
        const addressType = document.querySelector('input[name="editAddressType"]:checked').value;
        
        // Prepare data to send to the backend
        const data = {
            houseName: houseName,
            street: street,
            city: city,
            state: state,
            country: country,
            postalCode: postalCode,
            phoneNumber: phoneNumber,
            addressType: addressType,
            id:addressId
        };
    
        // Perform a fetch operation to the backend
        fetch('/editAddress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show SweetAlert for success
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Address Updated'
                }).then(() => {
                    // Hide the modal after the SweetAlert
                    $('#editAddressModal').modal('hide');
                    document.getElementById('addAddressForm').reset()
                    location.reload()
    
                });
            } else {
                // Show SweetAlert for failure
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to update address'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }
    
    // delete address sweet alert and fetch operation
    function confirmDelete(addressId) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Are you sure about deleting the address?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Perform fetch operation to delete address
                    fetch(`/deleteAddress?id=${addressId}`, {
                        method: 'POST'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Deleted!', 'The address has been deleted.', 'success').then(() => {
                    // Hide the modal after the SweetAlert
                    location.reload()
    
                });
                            // Optional: You can reload the page or update the UI as needed
                        } else {
                            Swal.fire('Error!', 'Failed to delete the address.', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire('Error!', 'An error occurred while deleting the address.', 'error');
                    });
                }
            });
        }
    
    
    
    </script>





   <%-include("../partials/footer.ejs")%>